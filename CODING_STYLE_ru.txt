ФОРМАТИРОВАНИЕ:
1) В качестве отступов используются 4 пробела, а не символ табуляции.
2) Строка кода по возможности не должна превосходить 84 символа,
   использовать разумные переносы строк.
3) Отделять скобки операторов и функций пробелами от параметров. Например:
   if ( fl )         void func( param1, param2 )    x = ( a + b ) * c;
   {                 {                              uint8 arr[ 8 ] = { 0 };
       ...               ...
   }                 }
4) Определение указателей и ссылок должно производиться в следующем формате:
   uint8 * somePointer; а не uint8* somePointer; или не uint8 *somePointer;
   uint8 & someReference; а не uint8& someReference; или не uint8 &someReference;
5) Открывающие и закрывающие скобки блоков операций должны находиться на новой строке.
   Например: func()     , а не func() {
             {                     ...
                 ...           }
             }
6) Для комментирования кода желательно преимущественно применять // а не /* .. */.
7) Однострочные условные операторы можно использовать без скобок. Например:
   if ( fl )
       doSomething();
8) Форматирование оператора выбора должно быть следующим:
   switch ( var )
   {
       case 0:
       {
       }
       break;

       case 1:
       {
       }
       break;

       default:
       {
       }
       break;
   }

   Допускается использование без скобок, если выражение умещается в одну строку.
   switch ( var )
   {
       case 0: zero(); break;
       case 1: one(); break;
       default: hz(); break;
   }
9) В операторах цикла использовать прединкримент, вместо постинкремента ( так оптимальней ).
   for ( int i = 0; i < 10; ++i )
       arr[ i ] += i;

ИМЕНОВАНИЕ:
1) Имена классов, структур и других составных типов должны начинаться с большой буквы,
   с отделение отдельных слов регистром начальной буквы. Например: SomeClass.
2) Имена переменных и функций должны начинаться с маленькой буквы. Например: someVar;
   Исключением могут быть аббревиатуры. Например: Uk, IEP, и т.д.
   Недопускается использование символа _ как разделителя слов, лучше использовать
   регистр символа.
3) Имена перечислений и определений должны состоять из символов в верхнем регистре с
   разделением слов символом _. Например: #define SOME_DEFINE
4) Название файлов должно соответствовать классу или функционалу модуля.
5) Допускается применять сокращения имен в разумных пределах без потери смысла.
6) Если это возможно, то лучше именовать с использованием английского языка, а
   не транслита ( выглядит иногда смешно ).

ВКЛЮЧЕНИЯ:
1) Каждый отдельный файл должен включать только необходимые ему заголовочные файлы.
2) Если это возможно, то включение лучше всего производить в файлах реализации *.cpp
   нежели в заголовочных файлах *.h ( это должно уменьшить время компиляции ).

КОММЕНТИРОВАНИЕ:
1) Код должен быть комментирован.
2) У файлов должна быть "шапка" в которой описано, что описано в файле.
3) В заголовочных файлах каждая переменная и функция должны быть комментированы.
4) В файлах реализации повторное комментирование переменных и функций не обязательно.
4) Допускается краткое описание переменной, логики работы метода и т.д..
5) Комментарии не должны быть "обширными", а должны содержать минимум символов при
   большей информативности ( только самое важное без подробностей ).
6) Желательно избегать закомментирования неиспользуемого кода ( очень сильно страдает
   наглядность ). Например:
   SomeModule::func1();
   //SomeModule::func2(); -- Лишний код некому не нужен.
   Если уж нужно где-то сохранить неиспользуемый код, то лучше завести для этих
   целей отделный файл, где будут храниться фрагменты кода.

РЕДАКТОРЫ:
В качестве редакторов с богатыми возможностями по форматированию и удобству написания
кода можно выделить SlickEdit.

ПРИМЕРЫ:

somefile.h

//
// Описание.
//
#ifndef SOME_FILE_H
#define SOME_FILE_H

#include "base.h"

class Derived : public Base
{
    private:
        // Описание переменной.
        static uint8 var;

    public:
        // Описание функции.
        static void func();
};

#endif

somefile.cpp

//
// Описание.
//
#include "somefile.h"

uint8 Derived::var;

void Derived::func()
{
    uint8 arr[ 8 ] = { 0 };
    uint8 * ptr = &arr[ 0 ];
    for ( int i = 0; i < 8; ++i )
       *( ptr++ ) = i + 5 * ( i * i ) / 255;
}

