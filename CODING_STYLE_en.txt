FORMAT:
1) Indentation: 4 spaces, not tab.
2) The line of code should not exceed 84 characters if possible,
   use reasonable line breaks.
3) Separate the brackets of operators and function by spaces on the parameters. For example:
   if ( fl ) void func( param1, param2 ) x = ( a + b ) * c;
   { uint8 arr[ 8 ] = { 0 };
       ... ...
   }
4) Determination of pointers and references should be done in the following format:
   uint8 * somePointer; not uint8* somePointer; or uint8 *somePointer;
   uint8 & someReference; not uint8& someReference; or uint8 &someReference;
5) opening and closing brackets blocks of operations should be on a new line.
   For example: func (), instead of func () {
                {                   }
                 ...
                }
6) For the commenting code using // instead of / * .. * / is desirable.
7) single-line conditional statements can be used without the brackets. For example:
   if ( fl )
       doSomething();
8) Formatting a select statement should be as follows:
   switch ( var )
   {
       case 0:
       {
       }
       break;

       case 1:
       {
       }
       break;

       default:
       {
       }
       break;
   }

   May be used without the brackets if the expression fits in one line.
   switch ( var )
   {
       case 0: zero (); break;
       case 1: one (); break;
       default: hz (); break;
   }
9) The operators of cycle use predinkriment, instead of post-increment (as it is optimal).
   for ( int i = 0; i < 10; ++i )
       arr[ i ] += i;

NAMING:
1) The class names, structures and other composite types must begin with a capital letter, with separation of individual words register the initial letter. For example: SomeClass.
2) The names of variables and functions must begin with a lowercase letter. For example: someVar;
   The exception may be abbreviations. For example: Uk, IEP, etc.
   Do not use the symbol _ as a separator of words, it is better to use
   capital letters.
3) The names of the enumeration and definition must consist of uppercase letters with words separated _. For example: # define SOME_DEFINE
4) The file name should match the class or functional module.
5) is allowed to use the abbreviated name within reasonable limits, without losing any meaning.
6) If possible, it is best to call using the English language, and
   no transliteration (sometimes looks ridiculous).

INCLUSION:
1) Each individual file should include only files required him.
2) If possible, the inclusion is better to be done in the implementation file *. cpp than in the header files *. h (this should reduce compilation time).

COMMENT:
1) The code must be commented on.
2) The file should be a "head" which describes what is placed in the file.
3) In the header files every variable and function should be commented.
4) In the implementation file re-commenting of variables and functions is not necessary.
4) Allowed a brief description of the variable logic of the method, and so on.
5) Comments should not be "extensive" and must contain a minimum of characters in more informative (only the most important thing no details).
6) It is desirable to avoid bloc commenting of unused code (very severely affected visibility). For example:
   SomeModule::func1();
   // SomeModule::func2(); - extra code do not need nobody.
   If you really need somewhere to save the unused code, it is better to make these goals otdelny file that will store code snippets.

EXAMPLES:

somefile.h

//
// Description.
//
#ifndef SOME_FILE_H
#define SOME_FILE_H

#include "base.h"

class Derived : public Base
{
    private:
        // Description of the variable.
        static uint8 var;

    public:
        // Function description.
        static void func();
};

#endif

somefile.cpp

//
// Description.
//
#include "somefile.h"

uint8 Derived::var;

void Derived::func()
{
    uint8 arr[ 8 ] = { 0 };
    uint8 * ptr = &arr[ 0 ];
    for ( int i = 0; i < 8; ++i )
       *( Ptr++ ) = i + 5 * ( i * i ) / 255;
}
